package govkbot

import (
	"testing"
	"encoding/json"
	"log"
	"strings"
)

func TestGetMessage(t *testing.T) {

	data := "[4, 606838, 1, 329007844, 1508267602, \"тест\"]"
	d := json.NewDecoder(strings.NewReader(data))
	d.UseNumber()
	var lp interface{}
	if err := d.Decode(&lp); err != nil {
		log.Fatal(err)
	}
	log.Printf("%+v\n", lp)
	message := GetLongPollMessage(lp.([]interface{}))
	if message.Text != "тест" {
		t.Error("wrong longpoll message")
	}
}

func TestGetLongPollResponse(t *testing.T) {
	data := `{"ts":1668805076,"updates":[[8,-55664362,2,1508267380],[8,-98479298,4,1508267383],[9,-477323,1,1508267088],[8,-2460576,2,1508267387],[8,-500389,2,1508267388],[8,-3016009,2,1508267389],[9,-18783721,1,1508267097],[9,-18113676,0,1508267408],[9,-5612786,1,1508267111],[9,-6677898,0,1508267412],[8,-198888123,7,1508267412],[8,-3701375,2,1508267412],[9,-84243991,1,1508267113],[9,-23831917,1,1508267113],[9,-4493687,1,1508267114],[9,-4236125,1,1508267115],[9,-1292312,1,1508267122],[9,-279066707,0,1508267423],[9,-5620883,1,1508267125],[9,-4102242,0,1508267429],[8,-7441068,4,1508267430],[9,-31125793,0,1508267433],[8,-84191,2,1508267434],[9,-86815725,1,1508267135],[9,-63583512,1,1508267139],[9,-1388992,1,1508267139],[9,-112943884,1,1508267140],[9,-42350168,1,1508267142],[8,-224994247,4,1508267442],[8,-89094261,3,1508267291],[8,-205780367,4,1508267442],[9,-1513433,1,1508267148],[8,-42350168,7,1508267442],[8,-89094261,7,1508267443],[9,-3987719,1,1508267149],[8,-332706,2,1508267450],[9,-605181,1,1508267151],[9,-1033348,1,1508267156],[9,-114077761,1,1508267161],[9,-721129,1,1508267164],[9,-11454317,1,1508267165],[8,-42180602,1,1508267465],[9,-86006041,0,1508267465],[8,-169400787,1,1508267467],[8,-43801987,4,1508267469],[9,-14124072,1,1508267170],[8,-207046,2,1508267471],[9,-23977019,1,1508267173],[8,-2600611,4,1508267473],[9,-13673650,1,1508267177],[9,-1978768,0,1508267478],[9,-46422218,1,1508267179],[9,-13260821,1,1508267179],[8,-6568969,7,1508267480],[9,-16326081,1,1508267182],[9,-631784,0,1508267487],[9,-64367591,1,1508267188],[9,-161334082,1,1508267190],[9,-19936563,0,1508267493],[8,-161334082,7,1508267490],[8,-6885865,1,1508267496],[8,-6885865,1,1508267500],[8,-5045987,1,1508267506],[8,-279066707,4,1508267506],[8,-140287757,1,1508267509],[9,-867261,1,1508267209],[9,-5045987,0,1508267506],[9,-59313704,1,1508267215],[9,-273847903,1,1508267216],[8,-54906009,1,1508267519],[8,-9769099,7,1508267522],[8,-23831917,2,1508267522],[9,-118462,1,1508267223],[8,-608105,4,1508267525],[8,-273847903,2,1508267525],[9,-13423779,1,1508267226],[8,-30773412,2,1508267528],[9,-564238,1,1508267252],[8,-18113676,4,1508267552],[8,-1033348,7,1508267554],[8,-16371937,4,1508267553],[8,-4583416,1,1508267555],[9,-1751443,1,1508267258],[8,-802965,1,1508267278],[8,-1980643,4,1508267369],[8,-7741116,1,1508267565],[9,-12149460,1,1508267268],[9,-7741116,0,1508267566],[9,-165978057,1,1508267277],[9,-802965,1,1508267278],[8,-1895510,4,1508267578],[9,-18020686,1,1508267281],[8,-56390075,2,1508267583],[8,-145388241,7,1508267585],[8,-207085044,4,1508267572],[8,-1284419,7,1508267589],[8,-16973861,7,1508267588],[8,-3511815,7,1508267594],[9,-6911557,1,1508267298],[8,-98479298,1,1508267380],[7,329007844,532691],[4,606838,1,329007844,1508267602,"тест",{"title":" ... "}],[80,1,0],[9,-53480744,1,1508267303]]}`
	resp, err := GetLongPollResponse([]byte(data))
	if err != nil {
		log.Fatal(err)
	}
	messages := make([]*LongPollMessage, 1)
	for _, el := range resp.Updates {
		if el[0].(int) == 4 {
			messages = append(messages, GetLongPollMessage(el))
		}
	}
	if len(messages) != 1 {
		t.Error("wrong messages count")
	}
	if messages[0].Text != "тест" {
		t.Error("wrong messages text")
	}
}